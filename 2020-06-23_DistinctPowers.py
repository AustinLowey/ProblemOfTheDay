#6/23/20
"""
Problem Statement:
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, 
we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
"""

#Iteration #1 generates all terms and then only appends if term is distinct.
def distinctPowers(a_min, a_max, b_min, b_max):
    terms = []
    for i in range(a_min, a_max + 1, 1):
        for j in range(b_min, b_max + 1, 1):
            if (i**j) not in terms:
                terms.append(i**j)
    terms.sort()    
    return terms

#Verification:        
terms1 = distinctPowers(2,5,2,5) #Returns [4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125]

#Solution:
terms2 = distinctPowers(2,100,2,100)
print(len(terms2)) #Prints answer, which is 9183.


#Iteration #2 uses list comprehension to generate all terms, then removes duplicates.
def distinctPowersListComp(a_min, a_max, b_min, b_max):
    terms = [i**j for i in range(a_min, a_max + 1, 1) for j in range(b_min, b_max + 1, 1)] #Generate all terms
    terms = list(dict.fromkeys(terms)) #Removes duplicate terms since dictionaries can't have duplicate keys.
    return terms

termsListComp = distinctPowersListComp(2,100,2,100)
print(len(termsListComp)) #Prints answer, which is 9183.