#6/11/20
"""Problem Statement:
Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not 
exceed four million, find the sum of the even-valued terms.
"""

def evenFibNums(n):
    L = [1,2]
    while L[-1] < n: #Find all Fibonacci numbers up to n (and first Fib num after n)
        L.append(L[-1] + L[-2])
    L.pop(-1) #Remove the extra, unneeded Fib num generated from while loop
    sumEvenNums = sum([j for i,j in enumerate(L) if L[i] % 2 == 0]) #Sum of even numbers in L
    return L, sumEvenNums, n

L, sumEvenNums, n = evenFibNums(4000000)
print('The Fibonacci numbers whose values do not exceed ' + "{:,}".format(n) + ':\n\n' + str(L) + '\n')
#Note: In above line, "{:,}".format(n) used instead of str(n) to add commas to number format.
print('Out of these terms, the sum of the even terms is ' + str(sumEvenNums) + '.')